{
    "1": {
        "id": 1,
        "class": "Sequence",
        "name": "",
        "args": [],
        "children": [
            64,
            3,
            19,
            18,
            61,
            66
        ]
    },
    "3": {
        "id": 3,
        "class": "ExecuteScript",
        "name": "Config Mim",
        "asset-pack": "core",
        "parent": 1,
        "args": [
            [
                "() => {",
                "  console.log(`This is the BT for the MIM behavior: notepad.config:`);",
                "  console.log(notepad.config);",
                "  ",
                "  notepad.mimId = notepad.config.mimId;",
                "  notepad.mimsPath = notepad.config.mimsPath;",
                "  ",
                "  let path = require('path');",
                "  let MimConfig = require('../mim-config');",
                "  ",
                "\tlet mimConfigFilename = path.resolve(notepad.mimsPath, notepad.mimId + '.json');",
                "\tlet mimConfigData = require(mimConfigFilename);",
                "\t",
                "  notepad.mimConfig = new MimConfig();",
                "\tnotepad.mimConfig.initWithJSON(mimConfigData);",
                "  ",
                "  notepad.maxTries = 3; // default",
                "  if (notepad.mimConfig.maxTries) {",
                "    notepad.maxTries = notepad.mimConfig.maxTries;",
                "  }",
                "\t",
                "\tconsole.log(`Mim BT: mimConfig`);",
                "\tconsole.log(notepad.mimConfig);",
                "  ",
                "  if (notepad.config.rulesPath) {",
                "    notepad.rulesPath = notepad.config.rulesPath",
                "  } else {",
                "    console.log(`ERROR: Mim BT: Invalid rulesPath!`);",
                "  }",
                "  ",
                "  notepad.rulesSuffix = 'rule';",
                "  if (notepad.config.rulesSuffix) {",
                "    notepad.rulesSuffix = notepad.config.rulesSuffix",
                "  }",
                "  ",
                "  //MIM MANAGER",
                "  console.log(`Mim BT: MimManager: ${blackboard.MimManager}`);",
                "  if (blackboard.MimManager) {",
                "    console.log(`Mim BT: blackboard.MimManager.guiManager: ${blackboard.MimManager.guiManager}`);",
                "  }",
                "  // notepad.guiManager = null;",
                "  // if (blackboard.MimManager) {",
                "  //   notepad.guiManager = blackboard.MimManager.guiManager;",
                "  // }",
                "",
                "  notepad.promptData = notepad.config.promptData;",
                "  if (!notepad.promptData) {",
                "    notepad.promptData = {};",
                "  }",
                "  ",
                "  console.log(`MimId: ${notepad.mimId}`);",
                "  console.log(`rulesPath: ${notepad.rulesPath}`);",
                "}"
            ]
        ]
    },
    "18": {
        "id": 18,
        "class": "ExecuteScript",
        "name": "Load Rule File",
        "asset-pack": "core",
        "parent": 1,
        "args": [
            [
                "() => {",
                "  let fs = require('fs');",
                "  let path = require ('path');",
                "  let ruleFileName = path.resolve(notepad.rulesPath, notepad.mimConfig.ruleName + '.' + notepad.rulesSuffix);",
                "  notepad.rule = null;",
                "  ",
                "  fs.readFile(ruleFileName, 'utf8', (err, data) => {",
                "                if (err) {",
                "                    console.log(`Mim BT Error: Cannot load Rules File!`);",
                "                    console.log(`ruleFileName: ${ruleFileName}`);",
                "                    console.log(err);",
                "                } else {",
                "                    console.log(`Rule data loaded.`);",
                "                    notepad.rule = data;",
                "                }",
                "            });",
                "}"
            ]
        ]
    },
    "19": {
        "id": 19,
        "class": "ExecuteScript",
        "name": "Log MimConfig",
        "asset-pack": "core",
        "parent": 1,
        "args": [
            [
                "() => {",
                "    ",
                "  if (notepad.mimConfig) {",
                "    console.log(`MimConfig: Found: ${notepad.mimId}`);",
                "    ",
                "    console.log(notepad.mimConfig.toString());",
                "    ",
                "    console.log(",
                "      notepad.mimConfig.mimId,",
                "      notepad.mimConfig.skillId,",
                "      notepad.mimConfig.mimType,",
                "      notepad.mimConfig.ruleName,",
                "      notepad.mimConfig.ruleSlots,",
                "      notepad.mimConfig.screenSlotsAvailable,",
                "      notepad.mimConfig.sampleUtterance,",
                "      notepad.mimConfig.noInputValue,",
                "      notepad.mimConfig.forceConfirmation,",
                "      notepad.mimConfig.bargeIn,",
                "      notepad.mimConfig.photoQualityLight,",
                "      notepad.mimConfig.notes",
                "    );",
                "    ",
                "    notepad.mimConfig.prompts.forEach(prompt => {",
                "      console.log(prompt);",
                "    });",
                "    ",
                "    let MIM_ErrorPrompts = notepad.mimConfig.getPromptsWithCategory('Errors');",
                "    ",
                "    console.log(`Error prompts for ${notepad.mimId}:`);",
                "    MIM_ErrorPrompts.forEach(prompt => {",
                "      console.log(prompt.toString());",
                "    });",
                "  } else {",
                "    console.log(`MimConfig: Cannot find: ${notepad.mimId}`);",
                "  }",
                "}"
            ]
        ]
    },
    "45": {
        "id": 45,
        "class": "ExecuteScript",
        "name": "Update guiManager",
        "asset-pack": "core",
        "parent": 61,
        "args": [
            [
                "() => {",
                "  if (notepad.guiManager) {",
                "    notepad.guiManager.reset();",
                "    notepad.guiManager.updateMimConfig(notepad.mimConfig);",
                "  }",
                "}"
            ]
        ],
        "skipped": true
    },
    "60": {
        "id": 60,
        "class": "ListenJs",
        "name": "Speech",
        "asset-pack": "core",
        "parent": 68,
        "args": [
            [
                "() => {",
                "\t",
                "\tnotepad.mimState.incrementTries();",
                "\t// if (notepad.guiManager) {",
                "\t// \tnotepad.guiManager.listenStart(notepad.mimState, notepad.mimConfig);",
                "\t// }",
                "\t",
                "\tlet options = {",
                "\t\theyJibo: false,",
                "\t\tdetectEnd: false,",
                "\t\treturnSpeakers: true,",
                "\t\tincremental: false,",
                "\t\ttimeout: 6000,",
                "\t\tbargein: false,",
                "\t\tspeakerName: ''",
                "\t}",
                "\treturn options;",
                "}"
            ],
            [
                "(callback) => {",
                "\tcallback(notepad.rule);",
                "}"
            ],
            [
                "(listener) => {",
                "\tlistener.on('cloud', (asrResultsData, speakerIdsData) => {",
                "\t\tconsole.log(`ListenJS Listen: Results:`);",
                "\t\tconsole.log(`asrResult:`, asrResultsData);",
                "\t\tconsole.log(`speakerIds:`, speakerIdsData);",
                "\t\t",
                "\t\tnotepad.asrResults = new blackboard.AsrResults(asrResultsData);",
                "\t\tnotepad.speakerIds = new blackboard.SpeakerIds(speakerIdsData);",
                "\t});",
                "}"
            ]
        ],
        "skipped": true
    },
    "61": {
        "id": 61,
        "class": "Sequence",
        "name": "Try and Try",
        "asset-pack": "core",
        "parent": 1,
        "args": [],
        "decorators": [
            62
        ],
        "children": [
            45,
            75,
            76,
            77,
            93,
            80,
            87,
            67
        ]
    },
    "62": {
        "id": 62,
        "class": "WhileCondition",
        "name": "",
        "asset-pack": "core",
        "args": [
            [
                "() => {",
                "}"
            ],
            [
                "() => {",
                "   return !notepad.mimState.done;",
                "}"
            ]
        ]
    },
    "64": {
        "id": 64,
        "class": "ExecuteScript",
        "name": "Init",
        "asset-pack": "core",
        "parent": 1,
        "args": [
            [
                "() => {  ",
                "  notepad.mimState = new blackboard.MimState();",
                "  notepad.mimState.lastResultState = 'entry';",
                "}"
            ]
        ]
    },
    "65": {
        "id": 65,
        "class": "ExecuteScript",
        "name": "Analyze Results",
        "asset-pack": "core",
        "parent": 91,
        "args": [
            [
                "() => {",
                "  notepad.mimState.lastResultState = notepad.asrResults.state;",
                "  ",
                "  switch (notepad.mimState.lastResultState) {",
                "      case 'match':",
                "        notepad.mimState.success = true;",
                "        break;",
                "      case 'noMatch':",
                "        notepad.mimState.incrementNoMatchCount();",
                "        break;",
                "      case 'noInput':",
                "        notepad.mimState.incrementNoInputCount();",
                "        break;",
                "  }",
                "  ",
                "  if (notepad.mimState.tries >= notepad.maxTries) {",
                "    notepad.mimState.failure = true;",
                "  }",
                "  ",
                "  // if (notepad.guiManager) {",
                "  //     notepad.guiManager.listenStop(notepad.mimState, notepad.asrResults, notepad.speakerIds);",
                "  // }",
                "}"
            ]
        ]
    },
    "66": {
        "id": 66,
        "class": "ExecuteScript",
        "name": "Report Results",
        "asset-pack": "core",
        "parent": 1,
        "args": [
            [
                "() => {",
                "  console.log(`Mim-bt: Evaluate Results`);",
                "  if (notepad.mimState.success) {",
                "    console.log(`SUCCESS`);",
                "  } else if (notepad.mimState.failure) {",
                "    console.log(`FAILURE`);",
                "  }",
                "  ",
                "  // if (notepad.guiManager) {",
                "  //   notepad.guiManager.updateResults(notepad.asrResults, notepad.speakerIds);",
                "  // }",
                "  ",
                "  if (notepad.onResults) {",
                "    console.log(`Mim: calling onResults`);",
                "    notepad.onResults({",
                "      state: notepad.mimState,",
                "      asrResults: notepad.asrResults,",
                "      speakerIds: notepad.speakerIds",
                "    });",
                "  }",
                "}"
            ]
        ]
    },
    "67": {
        "id": 67,
        "class": "TimeoutJs",
        "name": "Wait 2 seconds",
        "asset-pack": "core",
        "parent": 61,
        "args": [
            [
                "() => {",
                "   return 2000;",
                "}"
            ]
        ],
        "skipped": true
    },
    "68": {
        "id": 68,
        "class": "Parallel",
        "name": "Receive Multimodal Input",
        "asset-pack": "core",
        "parent": 91,
        "args": [
            true
        ],
        "children": [
            94,
            60,
            69,
            70,
            71
        ],
        "decorators": []
    },
    "69": {
        "id": 69,
        "class": "MimGui",
        "name": "GUI",
        "asset-pack": "project",
        "parent": 68,
        "args": [
            [
                "() =>  {",
                "\treturn {",
                "\t\tmimConfig: notepad.mimConfig,",
                "\t\tmimState: notepad.mimState",
                "\t}",
                "}"
            ],
            [
                "(status) =>  {",
                "}"
            ],
            [
                "(results) =>  {",
                "  console.log(`MimBt: MimGui Results:`, results);",
                "  notepad.asrResults = results.asrResults;",
                "  notepad.speakerIds = results.speakerIds;",
                "}"
            ]
        ],
        "skipped": false
    },
    "70": {
        "id": 70,
        "class": "Lever",
        "name": "This Use Sample Utterances",
        "asset-pack": "jibo-levers",
        "parent": 68,
        "args": [
            [
                "(callback) => {",
                "\tlet leverPrompt = notepad.mimConfig.mimId;",
                "\tif (notepad.currentPrompt) {",
                "\t\tleverPrompt = notepad.mimState.promptText;",
                "\t}",
                "\t",
                "\tlet leverState = {",
                "\t title: leverPrompt,",
                "\t levers: notepad.mimConfig.getSampleUtterancesAsNameLabelPairs()",
                "\t};",
                "\t ",
                "\t console.log(leverState);",
                "\t callback(leverState);",
                "}"
            ],
            [
                "(lever, state, callback) => {",
                "\t notepad.leverName = lever.name;",
                "\t ",
                "\t let asrResultsData = {",
                "\t\t Input: lever.name,",
                "\t\t NLParse: { input:lever.name, slotAction: lever.name},",
                "\t\t heuristic_score: 10",
                "\t };",
                "\t ",
                "\t console.log(`Lever: Results:`);",
                "\t console.log(`asrResult:`, asrResultsData);",
                "\t console.log(`speakerIds:`, null);",
                "\t ",
                "\t notepad.asrResults = new blackboard.AsrResults(asrResultsData);",
                "\t notepad.speakerIds = new blackboard.SpeakerIds();",
                "",
                "\t callback();",
                "}"
            ]
        ]
    },
    "71": {
        "id": 71,
        "class": "Null",
        "name": "Head Touch",
        "asset-pack": "core",
        "parent": 68,
        "args": []
    },
    "75": {
        "id": 75,
        "class": "ExecuteScript",
        "name": "Determine Entry Prompt SubCategory",
        "asset-pack": "core",
        "parent": 61,
        "args": [
            [
                "() => {",
                "  ",
                "  notepad.entryPromptSubCategory = null;",
                "  ",
                "  switch (notepad.mimConfig.mimType) {",
                "    case 'question':",
                "      notepad.entryPromptSubCategory = 'Q';",
                "      break;",
                "    case 'announce':",
                "      notepad.entryPromptSubCategory = 'AN';",
                "      break;",
                "    case 'optional-response':",
                "      notepad.entryPromptSubCategory = 'AN';",
                "      break;",
                "    case 'wait':",
                "      notepad.entryPromptSubCategory = 'WAIT';",
                "      break;",
                "    default:",
                "      console.error(`In MiM ${notepad.mimId}, incorrect mimType of ${notepad.mimConfig.mimType}`);",
                "      break;",
                "  }",
                "}"
            ]
        ]
    },
    "76": {
        "id": 76,
        "class": "ExecuteScript",
        "name": "Choose Prompt",
        "asset-pack": "core",
        "parent": 61,
        "args": [
            [
                "() => {",
                "  console.log(`Choosing prompt for state: ${notepad.mimState.lastResultState}`);",
                "  notepad.currentPrompt = null;",
                "  ",
                "  switch (notepad.mimState.lastResultState) {",
                "      case 'entry':",
                "        notepad.currentPrompt = notepad.mimConfig.getPromptWithCategoryAndSubCategory('Entry-Core', notepad.entryPromptSubCategory);",
                "        break;",
                "      case 'noMatch':",
                "        notepad.currentPrompt = notepad.mimConfig.getErrorNoMatchPrompt();",
                "        break;",
                "      case 'noInput':",
                "        notepad.currentPrompt = notepad.mimConfig.getErrorNoInputPrompt();",
                "        break;",
                "      default:",
                "        console.log(`Invalid lastResultState: ${notepad.mimState.lastResultState}`);",
                "        break;",
                "  }  ",
                "}"
            ]
        ]
    },
    "77": {
        "id": 77,
        "class": "ExecuteScript",
        "name": "Replace dynamic prompt tokens",
        "asset-pack": "core",
        "parent": 61,
        "args": [
            [
                "() => {",
                "  let vm = require('vm');",
                "  let util = require('util');",
                "  ",
                "  //On Tuesday, it will be: ${conditions} ${inLocale} With a high in the: ${highTemp} And a low in the: ${lowTemp}",
                "  notepad.mimState.promptText = '';",
                "  console.log(`replacePromptTokensWithData: data`, notepad.promptData);",
                "",
                "  let context = new vm.createContext(notepad.promptData);",
                "  let script_text = '`' + notepad.currentPrompt.getPromptText() + '`';",
                "  console.log(`script_text: ${script_text}`);",
                "",
                "  var script = new vm.Script(script_text);",
                "",
                "  notepad.mimState.promptText = script.runInContext(context);",
                "}"
            ]
        ]
    },
    "80": {
        "id": 80,
        "class": "TextToSpeechJs",
        "name": "Say prompt",
        "asset-pack": "core",
        "parent": 61,
        "args": [
            [
                "(callback) => {",
                "\tcallback(notepad.mimState.promptText);",
                "}"
            ],
            [
                "(word) => {",
                "}"
            ]
        ],
        "skipped": true
    },
    "87": {
        "id": 87,
        "class": "Switch",
        "name": "",
        "asset-pack": "core",
        "parent": 61,
        "args": [],
        "children": [
            91,
            89
        ]
    },
    "89": {
        "id": 89,
        "class": "ExecuteScript",
        "name": "Results for Announce",
        "asset-pack": "core",
        "parent": 87,
        "args": [
            [
                "() => {",
                "  console.log(`Announce: Ignoring results:`);",
                "  notepad.asrResults = null;",
                "  notepad.speakerIds = null;",
                "  notepad.mimState.success = true;",
                "}"
            ]
        ],
        "decorators": [
            90
        ]
    },
    "90": {
        "id": 90,
        "class": "Case",
        "name": "",
        "asset-pack": "core",
        "args": [
            [
                "() => {",
                "  return notepad.mimConfig.mimType === 'announce';",
                "}"
            ]
        ]
    },
    "91": {
        "id": 91,
        "class": "Sequence",
        "name": "",
        "asset-pack": "core",
        "parent": 87,
        "args": [],
        "decorators": [
            92
        ],
        "children": [
            68,
            65
        ]
    },
    "92": {
        "id": 92,
        "class": "Case",
        "name": "",
        "asset-pack": "core",
        "args": [
            [
                "() => {",
                "  return notepad.mimConfig.mimType != 'announce';",
                "}"
            ]
        ]
    },
    "93": {
        "id": 93,
        "class": "EmbodiedSpeak",
        "name": "",
        "asset-pack": "embodied-dialog",
        "parent": 61,
        "args": [
            [
                "(callback) => {",
                "\tcallback(notepad.mimState.promptText);",
                "}"
            ]
        ]
    },
    "94": {
        "id": 94,
        "class": "EmbodiedListen",
        "name": "",
        "asset-pack": "embodied-dialog",
        "parent": 68,
        "args": [
            [
                "() => {",
                "\t",
                "\tnotepad.mimState.incrementTries();",
                "\t// if (notepad.guiManager) {",
                "\t// \tnotepad.guiManager.listenStart(notepad.mimState, notepad.mimConfig);",
                "\t// }",
                "\t",
                "\tlet options = {",
                "\t\theyJibo: false,",
                "\t\tdetectEnd: false,",
                "\t\treturnSpeakers: true,",
                "\t\tincremental: false,",
                "\t\ttimeout: 6000,",
                "\t\tbargein: false,",
                "\t\tspeakerName: ''",
                "\t}",
                "\treturn options;",
                "}"
            ],
            [
                "(callback) => {",
                "\tcallback(notepad.rule);",
                "}"
            ],
            [
                "(listener) => {",
                "\tlistener.on('cloud', (asrResultsData, speakerIdsData) => {",
                "\t\tconsole.log(`ListenJS Listen: Results:`);",
                "\t\tconsole.log(`asrResult:`, asrResultsData);",
                "\t\tconsole.log(`speakerIds:`, speakerIdsData);",
                "\t\t",
                "\t\tnotepad.asrResults = new blackboard.AsrResults(asrResultsData);",
                "\t\tnotepad.speakerIds = new blackboard.SpeakerIds(speakerIdsData);",
                "\t});",
                "}"
            ]
        ]
    }
}